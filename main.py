import re
from pathlib import Path
from collections import defaultdict
from datetime import datetime

def parse_kindle_highlights(text):
    """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ Kindle –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    entries = text.split('\n==========\n')
    
    books = defaultdict(list)
    current_book = None
    
    for entry in entries:
        if not entry.strip():
            continue
            
        lines = entry.strip().split('\n')
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –æ–±—ã—á–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        if lines[0].startswith('Ôªø') or '(' in lines[0]:
            current_book = lines[0].replace('Ôªø', '').strip()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏
            book_match = re.search(r'(.*?)\s*\((.*?)\)', current_book)
            if book_match:
                book_title = book_match.group(1).strip()
                book_author = book_match.group(2).strip()
            else:
                book_title = current_book
                book_author = "Unknown"
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç
            if len(lines) >= 2:
                metadata = lines[1] if lines[1].startswith('‚Äì') else None
                content = '\n'.join(lines[2:]).strip() if len(lines) > 2 else ""
                
                if metadata:
                    entry_data = {
                        'metadata': metadata,
                        'content': content,
                        'book_title': book_title,
                        'book_author': book_author
                    }
                    books[book_title].append(entry_data)
    
    return books

def create_obsidian_note(book_title, book_author, entries):
    """–°–æ–∑–¥–∞–µ—Ç markdown –∑–∞–º–µ—Ç–∫—É –¥–ª—è Obsidian"""
    
    # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    safe_filename = re.sub(r'[<>:"/\\|?*]', '', book_title)
    safe_filename = safe_filename[:100]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    
    note = f"""---
title: {book_title}
author: {book_author}
type: book
tags: 
  - book
  - highlights
date: {datetime.now().strftime('%Y-%m-%d')}
---

# {book_title}

**–ê–≤—Ç–æ—Ä:** {book_author}

---

## –ó–∞–º–µ—Ç–∫–∏ –∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è

"""
    
    for i, entry in enumerate(entries, 1):
        metadata = entry['metadata']
        content = entry['content']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø–∏—Å–∏
        if '–∑–∞–º–µ—Ç–∫–∞' in metadata.lower():
            entry_type = "üí≠ –ó–∞–º–µ—Ç–∫–∞"
        elif '–≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –æ—Ç—Ä—ã–≤–æ–∫' in metadata.lower() or 'highlighted' in metadata.lower():
            entry_type = "üìå –í—ã–¥–µ–ª–µ–Ω–∏–µ"
        elif '–∑–∞–∫–ª–∞–¥–∫–∞' in metadata.lower():
            entry_type = "üîñ –ó–∞–∫–ª–∞–¥–∫–∞"
        else:
            entry_type = "üìù –ó–∞–ø–∏—Å—å"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        location_match = re.search(r'(–º–µ—Å—Ç–µ|—Å—Ç—Ä–∞–Ω–∏—Ü–µ|–ú–µ—Å—Ç–æ)\s+(\d+[\d‚Äì\-:,\s]*)', metadata)
        location = location_match.group(2) if location_match else "Unknown"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É
        date_match = re.search(r'–î–æ–±–∞–≤–ª–µ–Ω–æ:\s*(.+?)(?:\s*\||\s*$)', metadata)
        date_str = date_match.group(1) if date_match else ""
        
        note += f"""
### {entry_type} #{i}

**–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** {location}  
**–î–∞—Ç–∞:** {date_str}

"""
        
        if content:
            note += f"> {content}\n\n"
        
        note += "---\n"
    
    return safe_filename, note

def main(input_file, output_dir='obsidian_notes'):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ Kindle"""
    
    # –ß–∏—Ç–∞–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    with open(input_file, 'r', encoding='utf-8') as f:
        text = f.read()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    books = parse_kindle_highlights(text)
    
    # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    output_path = Path(output_dir)
    output_path.mkdir(exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–∏
    for book_title, entries in books.items():
        if not entries:
            continue
            
        book_author = entries[0]['book_author']
        filename, note_content = create_obsidian_note(book_title, book_author, entries)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        output_file = output_path / f"{filename}.md"
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(note_content)
        
        print(f"‚úì –°–æ–∑–¥–∞–Ω–∞ –∑–∞–º–µ—Ç–∫–∞: {filename}.md ({len(entries)} –∑–∞–ø–∏—Å–µ–π)")
    
    print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(books)} –∫–Ω–∏–≥")
    print(f"üìÅ –ó–∞–º–µ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_path.absolute()}")

if __name__ == "__main__":
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    input_file = "My Clippings.txt"  # –í–∞—à —Ñ–∞–π–ª —Å —ç–∫—Å–ø–æ—Ä—Ç–æ–º
    output_dir = "obsidian_notes"  # –ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
    
    main(input_file, output_dir)
